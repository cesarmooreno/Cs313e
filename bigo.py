"""
Student information for this assignment:

Replace Cesar Moreno with your name.
On my/our honor, Cesar Moreno, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:cm62873
"""


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n3(s):
      # s = "Longhorns"

      # subs = []

      # subs+=["string"]
      # print(subs)
      # counts = {}
      no_repeat = True
      # repeats = []

      longest = 0
      for i in range(len(s)):
      # print("i", i)

            for j in range(i +1,len(s) +1 ):
                  subs = s[i:j] # this sub string will run from the ith element to the jth element of s, the beginning and end shift 
                  #in here is where it works for some reasone
                  no_repeat = True
                  #need to count the frequencies
                  counts = [0 for c in range(256)]
                  
                  for char in subs:
                        #ord is an index for the counter
                        counts[ord(char)] +=1
                        # print(counts)
                        # if a character is repeated
                  for c in range(len(counts)):
                        if counts[c]>1:
                              no_repeat = False

                  if no_repeat: 
                        #this difference is how long the substring is 
                        # diff  = j-i
                        #update the longest one
                        # print(f"{j}-{i}")
                        # print("inhere")
                        longest = max(longest,j-i)
                        # print("longest", longest)
      return longest

        
        

# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n2(s):
      longest = 0 
      no_repeat = True
      #starting indices
      for i in range(len(s)):
            counts = [0 for c in range(256)]
            #ending indices
            for j in range(i, len(s)):
                  counts[ord(s[j])]+=1
                  if counts[ord(s[j])] >1 :
                        no_repeat = False
                        #will not allow the longest one to update
                  # print("where we are", s[j])
                  
                  
                  if no_repeat:
                        #same difference as earlier, j-i is the length of the substring, 
                        # print(i,j)
                        longest=max(longest, j-i +1) 
                        # print(longest)
                  # no_repeat = True
                        # no_repeat = True 
      return longest 
                  
            
                  #     print("we in here", s[j])
            
            #     print(counts)

# s = "Longhorns"
# print(length_of_longest_substring_n2(s))


def length_of_longest_substring_n(s):
      longest= 0
      for i in range(len(s)):
            counts = [0 for c in range(256)]
            for j in range(i,len(s)):
                  # print(s[j])
                  counts[ord(s[j])]+=1
                  if counts[ord(s[j])] >1:
                        break
                  # print(i,j)
                  longest = max(longest, j-i+1)
                  # print(longest)
      return longest

# print(length_of_longest_substring_n(s))
